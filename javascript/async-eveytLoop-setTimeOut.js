console.log('Start1');

console.log('Start2');

function timeout() {
  console.log('setTimeout 2000');
};

window.setTimeout(function () {
  console.log('setTimeout 2000');
}, 2000);

setTimeout(timeout, 2000);

console.log('Start3');

// Все функции выполняются сверху вниз. Если нужно нарушить очередь, то поможет асинхронность.
// setTimeOut – это браузерная функция, то есть из браузерного API, а не функция из js. 
// Она вызывается из глобального объекта window

// 1/ Интерпритатор спускается сниз по коду.
// 2/ Закидывает обычные функции в стек. Выполняет и идет ниже.
// 3/ Когда интерпритатор доходит до setTimeout, то закидывает ее в стек, видит функцию внутри sto и сразу выкидывавет из стека и регистрирует эту функцию в web API и ждет выполнения sto.
// 4/ Когда STO выполнен, то Функция попадает в очередь и проходит по нему циклом
// 5/ Если функция готова, то она отправляется обратно в стек и выполняется
// Цикл по очереди - это и есть event loop. Он по очереди закидывает функции в call stack.
// Даже если отсрочка 0, пока все функции не отработают, функция внутри sto не сработает
// Скроллы, клики, работа с сервером - всё это асинхроннфе операции

